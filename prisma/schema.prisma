generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  lichess       Lichess?

  @@map(name: "users")
}

model Lichess {
  id           Int           @id @default(autoincrement())
  lichessId    String        @unique
  username     String        @unique
  twitchName   String // needed for insensitive quary TODO: can be removed when using postgres
  title        String?
  countryCode  String?
  updatedAt    DateTime      @updatedAt
  bulletRating Int
  bulletProv   Boolean
  blitzRating  Int
  blitzProv    Boolean
  rapidRating  Int
  rapidProv    Boolean
  lichessToken LichessToken?

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  watchingStreamers Streamer[]

  @@map(name: "lichess")
}

model LichessToken {
  id           Int      @id @default(autoincrement())
  refreshToken String
  accessToken  String
  expiresAt    DateTime

  lichess           Lichess @relation(fields: [lichessDatabaseId], references: [id])
  lichessDatabaseId Int
}

model Streamer {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  updatedAt DateTime @updatedAt

  viewers Lichess[]
}
